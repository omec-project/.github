# Copyright 2025 Canonical Ltd.
# SPDX-FileCopyrightText: 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
name: Tag GitHub

on:
  workflow_call:
    outputs:
      changed:
        description: "Whether the VERSION file changed"
        value: ${{ jobs.tag-github.outputs.changed }}
      version:
        description: "The version for the release"
        value: ${{ jobs.tag-github.outputs.version }}
      release_branch:
        description: "Whether there is a need to create a release branch"
        value: ${{ jobs.tag-github.outputs.release_branch }}
      version_branch:
        description: "The name for the need-to-be-created branch"
        value: ${{ jobs.tag-github.outputs.version_branch }}

jobs:
  tag-github:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'omec-project'
    outputs:
      changed: ${{ steps.version-change.outputs.changed }}
      version: ${{ steps.version-change.outputs.version }}
      release_branch: ${{ steps.version-change.outputs.release_branch }}
      version_branch: ${{ steps.version-change.outputs.version_branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changes
        id: version-file
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep VERSION; then
            echo "changed=true" >> $GITHUB_OUTPUT
            version_before=$(git show ${{ github.event.before }}:VERSION)
            echo "version_before=$version_before" >> $GITHUB_OUTPUT
          else
            echo "VERSION file was not changed"
          fi

      - name: Validate change in version file
        id: version-change
        if: steps.version-file.outputs.changed == 'true'
        run: |
          version=$(cat VERSION)
          version_before_full=${{ steps.version-file.outputs.version_before }}
          version_before=${version_before_full::-4}
          echo "version=$version"
          echo "version_before=$version_before"
          validate="^[0-9]+\.[0-9]+\.[0-9]+$"

          if [[ $version =~ $validate ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
          else
            echo "Version change not for release"
          fi

          if [[ $version_before =~ $validate ]]; then
            IFS='.' read -r major minor patch <<< "$version"
            IFS='.' read -r major_b minor_b patch_b <<< "$version_before"
            if [[ "$major" -ne "$major_b" ]] || [[ "$minor" -ne "$minor_b" ]]; then
              version_branch="$major_b.$minor_b"
              echo "release_branch=true" >> $GITHUB_OUTPUT
              echo "version_branch=$version_branch" >> $GITHUB_OUTPUT
            fi
          else
            echo "Version change not for branch release"
          fi

      - name: Create release using REST API
        if: steps.version-change.outputs.changed == 'true'
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_OMEC_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{
              "tag_name": "v${{ steps.version-change.outputs.version }}",
              "target_commitish": "${{ github.event.repository.default_branch }}",
              "name": "v${{ steps.version-change.outputs.version }}",
              "draft": false,
              "prerelease": false,
              "generate_release_notes": true
              }'
