# Copyright 2025 Canonical Ltd.
# SPDX-FileCopyrightText: 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
name: Tag GitHub

on:
  workflow_call:

  push:
    paths:
      - "VERSION"

jobs:
  tag-github:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'omec-project'
    outputs:
      changed: ${{ steps.version-change.outputs.changed }}
      version: ${{ steps.version-change.outputs.version }}
      release_branch: ${{ steps.version-change.outputs.release_branch }}
      version_branch: ${{ steps.version-change.outputs.version_branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changes
        id: version-file
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep VERSION; then
            echo "changed=true" >> $GITHUB_OUTPUT
            version_before=$(git show ${{ github.event.before }}:VERSION)
            echo "version_before=$version_before" >> $GITHUB_OUTPUT
          else
            echo "VERSION file was not changed"
          fi

      - name: Validate change in version file
        id: version-change
        if: steps.version-file.outputs.changed == 'true'
        run: |
          version=$(cat VERSION)
          version_before_full=${{ steps.version-file.outputs.version_before }}
          version_before=${version_before_full::-4}
          echo "version=$version"
          echo "version_before=$version_before"
          validate="^[0-9]+\.[0-9]+\.[0-9]+$"

          if [[ $version =~ $validate ]]; then
           echo "changed=true" >> $GITHUB_OUTPUT
           echo "version=$version" >> $GITHUB_OUTPUT
          else
           echo "Version change not for release"
           exit 0
          fi

          if [[ $version_before =~ $validate ]]; then
           IFS='.' read -r major minor patch <<< "$version"
           IFS='.' read -r major_b minor_b patch_b <<< "$version_before"
           version_branch="$major_b.$minor_b"
           echo "version_branch=$version_branch" >> $GITHUB_OUTPUT
           if [[ "$major" -eq "$major_b" ]] && [[ "$minor" -eq "$minor_b" ]]; then
             echo "Version is compatible with the branch"
           else
             echo "Version $version is not compatible with branch version $version_branch"
             exit 0
           fi
           if [[ "$major" -ne "$major_b" ]] || [[ "$minor" -ne "$minor_b" ]]; then
             echo "release_branch=true" >> $GITHUB_OUTPUT
             echo "version_branch=$version_branch" >> $GITHUB_OUTPUT
           fi
          else
           echo "Invalid previous version format in VERSION file"
           exit 1
          fi

      - name: Create release
        if: steps.version-change.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_OMEC_PAT }}
        run: |
          echo "$GITHUB_TOKEN" | gh auth login --with-token
          if gh release create "${{ inputs.VERSION }}" --generate-notes; then
            echo "Release ${{ inputs.VERSION }} created ✅" >> "$GITHUB_STEP_SUMMARY"
            echo "Release ${{ inputs.VERSION }} created ✅"
          else
            echo "Failed to create release ${{ inputs.VERSION }} ❌" >> "$GITHUB_STEP_SUMMARY"
            echo "Failed to create release ${{ inputs.VERSION }} ❌"
          fi
          gh auth logout
